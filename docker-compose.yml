services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: [.env]
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-False}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
      - BACKEND_PORT=${BACKEND_PORT:-8000}
    depends_on: [db]
    volumes:
      - ./backend/staticfiles:/app/staticfiles
      - ./backend/media:/app/media
    expose:
      - "${BACKEND_PORT:-8000}"
    networks: [internal, proxy]
    labels:
      # Traefik is OFF by default locally; turn ON in Coolify by setting TRAEFIK_ENABLE=true
      - traefik.enable=${TRAEFIK_ENABLE:-false}
      - traefik.docker.network=${TRAEFIK_NETWORK:-proxy}

      # Service (internal container port Traefik should hit)
      - traefik.http.services.backend.loadbalancer.server.port=8000

      # HTTPS router (Coolify/prod)
      - traefik.http.routers.backend.rule=Host(`${BACKEND_HOST}`)
      - traefik.http.routers.backend.entryPoints=https
      - traefik.http.routers.backend.tls=true
      - traefik.http.routers.backend.service=backend

      # HTTP -> HTTPS redirect (Coolify/prod)
      - traefik.http.routers.backend-http.rule=Host(`${BACKEND_HOST}`)
      - traefik.http.routers.backend-http.entryPoints=http
      - traefik.http.routers.backend-http.middlewares=redirect-https

      - traefik.http.middlewares.redirect-https.redirectscheme.scheme=https
      - traefik.http.middlewares.redirect-https.redirectscheme.permanent=true

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: [.env]
    environment:
      - PUBLIC_API_BASE=${PUBLIC_API_BASE}
      - ORIGIN=${FRONTEND_URL}
    depends_on: [backend]
    expose:
      - "3000"
    networks: [internal, proxy]
    labels:
      - traefik.enable=${TRAEFIK_ENABLE:-false}
      - traefik.docker.network=${TRAEFIK_NETWORK:-proxy}

      - traefik.http.services.frontend.loadbalancer.server.port=3000

      - traefik.http.routers.frontend.rule=Host(`${FRONTEND_HOST}`)
      - traefik.http.routers.frontend.entryPoints=https
      - traefik.http.routers.frontend.tls=true
      - traefik.http.routers.frontend.service=frontend

      - traefik.http.routers.frontend-http.rule=Host(`${FRONTEND_HOST}`)
      - traefik.http.routers.frontend-http.entryPoints=http
      - traefik.http.routers.frontend-http.middlewares=redirect-https

  db:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file: [.env]
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks: [internal]

networks:
  internal:
    driver: bridge

  # In Coolify set: USE_COOLIFY=true and TRAEFIK_NETWORK=coolify
  # Locally: USE_COOLIFY=false (default) -> a normal local "proxy" network is created so compose doesn't fail.
  proxy:
    external: ${USE_COOLIFY:-false}
    name: ${TRAEFIK_NETWORK:-proxy}

volumes:
  postgres_data:
