services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: [.env]
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-False}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
      - BACKEND_PORT=${BACKEND_PORT:-8000}
    depends_on: [db]
    volumes:
      - ./backend/staticfiles:/app/staticfiles
      - ./backend/media:/app/media
    expose:
      - "8000"
    networks: [internal, coolify]
    labels:
      - traefik.enable=true
      - traefik.docker.network=coolify
      # service (which port Traefik should hit inside the container)
      - traefik.http.services.cs2clog-backend.loadbalancer.server.port=8000
      # HTTPS router for api.cs2clog.com
      - traefik.http.routers.cs2clog-backend.rule=Host(`api.cs2clog.com`)
      - traefik.http.routers.cs2clog-backend.entryPoints=https
      - traefik.http.routers.cs2clog-backend.tls=true
      - traefik.http.routers.cs2clog-backend.service=cs2clog-backend
      # HTTP router -> redirect to HTTPS
      - traefik.http.routers.cs2clog-backend-http.rule=Host(`api.cs2clog.com`)
      - traefik.http.routers.cs2clog-backend-http.entryPoints=http
      - traefik.http.routers.cs2clog-backend-http.middlewares=cs2clog-https-redirect
      # Define the redirect middleware
      - traefik.http.middlewares.cs2clog-https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.cs2clog-https-redirect.redirectscheme.permanent=true

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: [.env]
    environment:
      - PUBLIC_API_BASE=${PUBLIC_API_BASE}
      - ORIGIN=${FRONTEND_URL}
    depends_on: [backend]
    expose:
      - "3000"
    networks: [internal, coolify]
    labels:
      - traefik.enable=true
      - traefik.docker.network=coolify
      # service (port inside the container)
      - traefik.http.services.cs2clog-frontend.loadbalancer.server.port=3000
      # HTTPS router for cs2clog.com
      - traefik.http.routers.cs2clog-frontend.rule=Host(`cs2clog.com`)
      - traefik.http.routers.cs2clog-frontend.entryPoints=https
      - traefik.http.routers.cs2clog-frontend.tls=true
      - traefik.http.routers.cs2clog-frontend.service=cs2clog-frontend
      # HTTP router -> redirect to HTTPS
      - traefik.http.routers.cs2clog-frontend-http.rule=Host(`cs2clog.com`)
      - traefik.http.routers.cs2clog-frontend-http.entryPoints=http
      - traefik.http.routers.cs2clog-frontend-http.middlewares=cs2clog-https-redirect

  db:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file: [.env]
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks: [internal]

networks:
  internal:
    driver: bridge
  coolify:
    external: true
    name: coolify

volumes:
  postgres_data:
